// Code generated by go-bindata.
// sources:
// bing.go.tpl
// DO NOT EDIT!

package build

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bingGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xcf\x6f\x9c\x38\x14\x3e\xe3\xbf\xe2\x15\xa9\xaa\x89\x46\x4c\x77\x8f\x23\xcd\xa5\x69\x55\x75\xa3\x4d\x56\x69\xba\x97\x34\x5a\x39\x60\x88\x37\x83\xcd\xda\x26\x69\x16\xf1\xbf\x57\xcf\x06\x03\x93\x21\xd3\x43\x38\x24\xe0\xf7\xc3\xdf\x7b\xfe\xfc\xbe\x59\xaf\xe1\xe3\x05\x9c\x5f\x5c\xc1\xa7\x8f\x5f\xae\xde\xc0\xa9\xca\x39\x94\x5c\x72\xcd\x2c\xcf\x53\x42\x6a\x96\xdd\xb3\x92\x43\xdb\xa6\x7f\xf9\xd7\xae\x23\x44\x54\xb5\xd2\x16\x28\x01\x00\x88\x33\x25\x2d\xff\x61\x63\xff\xc5\x65\xa6\x72\x21\xcb\xf5\xbf\x46\xc9\x61\x4d\x6b\xa5\x4d\xff\x51\x54\x36\x26\xfe\xb5\x14\xf6\xae\xb9\x4d\x33\x55\xad\x1f\xff\x37\x77\xa2\xc2\xb8\xa2\x91\x59\x51\xae\xef\x85\xcc\xb9\x8e\x8f\x3b\xda\xa7\x9a\x9b\x5f\xf0\x6b\x64\xc5\xb4\xb9\x63\x3b\xcc\x9a\x10\x42\xd6\x6b\xd8\x0e\x0f\x7c\xe0\xa5\x90\x70\xaa\xaa\x4a\xc9\x71\x99\xac\xd7\x84\x3c\x30\x0d\x88\xe6\x8c\x3f\xc1\x16\xe2\xb6\x4d\xcf\xf8\x53\xd7\xc5\xde\x92\xf3\xe2\x0a\x11\xc0\x16\x1c\x92\xf4\x9c\x3f\xba\x05\x9a\xb8\x2d\xbe\x0d\xdb\x42\xcd\xb4\xe1\x06\xec\x1d\x07\xd7\x24\x9e\x43\xce\x2c\x03\x26\x73\x30\x56\xe9\xde\xa6\xb9\x69\x76\x96\x20\xea\x31\x98\x66\x4a\x16\xa2\x84\xeb\x9b\xdb\x27\xcb\x57\xf0\x00\x42\x5a\xae\x0b\x96\xf1\xb6\x4b\xc0\x35\x18\x5a\xd7\x84\x06\x36\x5b\x98\x14\x9b\x7e\x1b\xdf\xbd\x07\x3e\xa7\xf6\xc7\x06\xa0\x3f\xba\xf4\x03\xcb\xee\x4b\xad\x1a\x99\xd3\x64\x15\x7c\x3e\x73\xbb\x81\x50\x60\xfa\x99\xdb\xd1\x76\x26\x64\xbe\x01\x7f\x48\x29\x7e\x78\x53\xe7\xfe\x6a\x6e\x1b\x2d\xa1\x49\xf7\xf1\xaf\xe0\x21\x21\x9d\xeb\xcb\x9f\x7d\x57\xbc\xef\xa4\x2d\x42\x96\xa0\x0a\x78\xf0\x1d\xe8\xdd\xe8\x5e\xc1\x74\x68\x84\xab\x3c\xe9\x4b\xef\xf7\x45\xe6\xa5\x21\x70\xd8\xf0\x54\x55\xb5\x92\x5c\x5a\x10\x06\x6e\x99\x11\x19\x96\x26\xa4\xb0\x42\x49\xdc\x31\x38\x10\x3c\xc8\xa9\xff\xb0\x73\xbf\x8d\x30\xc1\x46\x87\xec\x97\xec\x71\xb6\x81\x3b\x50\xd0\xec\x11\x10\xa7\x39\x90\x7f\x16\xe1\xcb\x21\xbe\x66\x3a\x35\x25\xf3\xed\xa0\x9d\xb5\xef\x8f\xaf\x17\xe7\xa1\x85\x15\x30\xdf\x47\xb7\x3a\x6d\x66\x95\xf6\x99\x2b\x98\xe7\x9e\xa4\xa1\x4b\x5d\x15\x05\x54\xb0\xdd\x82\x14\x3b\x18\x09\xd4\xf7\xda\x47\xd0\x58\x36\xbb\x5d\x9c\xac\xd0\xe9\x39\x11\x2a\xbf\xde\xcd\x2f\x84\x43\x69\xb8\x35\x70\x52\x81\x55\xc0\x20\x53\xf5\x13\xc2\xc5\x6b\x31\x22\x3e\x99\x43\x9e\xc5\x53\x77\x83\x3c\x88\xf9\x35\x78\x11\xb5\x1f\x48\x78\x55\x69\x3c\xcd\xbe\xd9\x43\xa7\xa4\x8b\xaf\x95\xa3\x40\x9c\x4c\x4a\x3b\xa9\x60\x0b\xac\xae\xb9\xcc\x29\x3d\xa9\x92\xeb\xcd\xfb\x9b\x95\x47\x9e\xa6\xc9\xb4\xfa\xbe\x74\x57\x8e\x0f\x38\xfb\x9b\xde\xe3\x1d\x36\x56\x0b\x59\xfa\xa8\x50\x84\xff\x3f\x56\x81\xc6\xeb\xf7\x37\x58\xcb\xbb\xf6\xdd\xa4\x16\x51\xc0\x8e\x4b\xd7\x81\x04\xad\xbf\x4f\x6c\xf8\xb8\xac\xdb\xe1\x84\x8a\xca\xa6\x5f\x6b\x2d\xa4\x2d\x68\xdc\x7e\x8f\xdf\x9a\xef\xf1\xe6\xed\x7f\x5d\xbc\x02\xc4\x92\x24\x21\xb6\x03\xbe\x33\xfc\x70\xb2\xbe\xe0\x97\x73\xae\x42\x4e\x5f\xda\xf5\x6f\x9b\x9b\xd0\x94\xb1\x83\x33\x8a\xa0\x9f\x27\xc8\x7c\x2e\x7f\x92\xf9\xf3\xa9\x4c\xda\x56\x33\x59\x72\x48\xdd\x64\xea\xba\x43\xb3\x1c\xe7\xb4\x90\x79\xd7\xed\x8d\xf3\x4c\x49\x63\xdd\xe4\x6a\xdb\xf4\x9c\x55\xbc\xeb\xda\x36\xbd\xe4\x45\xff\x31\xcc\x78\x17\x1b\x3b\xca\x2e\x38\x06\x2f\xd2\xb6\x25\x97\x88\x05\x9c\xcd\xe3\x02\xf4\xed\x86\x93\xc7\x41\x83\xd7\x97\x44\xff\xc0\x76\x1c\xaa\x97\xbc\x14\xc6\x72\x4d\x49\x14\x2d\x63\x5a\x91\x28\xc2\x2c\x54\xc3\xc9\x61\x8f\x04\xd1\x60\x4a\xc4\x45\xa2\x28\xea\xfb\xaa\x49\x14\x61\x78\x12\x28\x48\x97\x12\x08\x13\x52\xf8\x39\x73\xcc\xfd\x35\xc7\xd2\xd2\x2e\xc7\x06\x54\xe4\x66\xa9\x5d\x88\x27\x11\xf2\xca\xb9\xa3\x2a\xce\x84\xc1\xd2\x2a\x49\x48\x24\x0a\x67\x7d\x33\x4c\x8a\xd0\x39\x29\x76\x2e\x90\x44\x7d\x9a\x40\x7f\xbc\xbe\xfe\xf7\xc0\xea\x05\x1e\x79\xee\x27\x24\x9a\x30\x7c\x32\x07\x9f\xd3\xfc\x10\x61\xdb\x96\x3b\x82\x8d\x8c\xff\x32\x88\xd1\x32\xed\x2f\x1a\xfb\x8c\xf5\x9e\xc5\x03\x41\x7a\x1f\x2f\x44\xe3\xfa\x54\xe8\xa2\x19\x1d\x48\x34\xaa\x57\x10\xbc\x49\xe0\x41\xc1\x0b\xf6\x20\x78\x63\xc4\x33\xc1\x0b\xa6\x45\x22\xee\x3b\xbd\xb2\x2a\x4e\x72\x1f\x25\xdd\x5c\x5c\x02\x65\x0e\x89\x21\xb2\xe7\xd5\x64\x70\x82\xf1\x17\x64\x70\x09\xe6\x9e\xfa\x85\xa4\x47\xd5\x0f\x6b\x39\xa2\x7b\xd1\x5c\xf4\x16\x78\xbe\xcf\xd0\x81\xe6\x3f\x03\x00\x00\xff\xff\x17\x1d\xeb\x44\x90\x0c\x00\x00"

func bingGoTplBytes() ([]byte, error) {
	return bindataRead(
		_bingGoTpl,
		"bing.go.tpl",
	)
}

func bingGoTpl() (*asset, error) {
	bytes, err := bingGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bing.go.tpl", size: 3216, mode: os.FileMode(420), modTime: time.Unix(1588002038, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bing.go.tpl": bingGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bing.go.tpl": &bintree{bingGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

