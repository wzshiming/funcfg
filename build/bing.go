// Code generated by go-bindata.
// sources:
// bing.go.tpl
// DO NOT EDIT!

package build

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bingGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x4d\x6f\xdb\x38\x10\x3d\x8b\xbf\x62\x6a\xa0\xa8\x14\x18\x72\x77\x8f\x06\x7c\x69\x9a\x43\xb7\xd8\xa4\x48\xd3\x53\x10\x6c\x18\x89\x52\xb8\x31\x49\x95\xa4\x9c\x7a\x09\xfe\xf7\x05\x49\x89\x92\x1c\x2b\xee\x21\x3e\x24\x92\xe6\xf3\x0d\x1f\xe7\xad\x56\xf0\xf9\x0a\x2e\xaf\x6e\xe0\xe2\xf3\x97\x9b\x77\x70\x2e\x4a\x02\x35\xe1\x44\x62\x4d\xca\x1c\xa1\x06\x17\x4f\xb8\x26\x60\x4c\xfe\x2d\x3c\x5a\x8b\x10\x65\x8d\x90\x1a\x52\x04\x00\xb0\x28\x04\xd7\xe4\x97\x5e\x84\x37\xc2\x0b\x51\x52\x5e\xaf\xfe\x55\x82\xf7\xdf\xa4\x14\x52\x75\x2f\x15\xd3\x0b\x14\x1e\x6b\xaa\x1f\xdb\x87\xbc\x10\x6c\xf5\xfc\x9f\x7a\xa4\xcc\xc5\x55\x2d\x2f\xaa\x7a\xa5\xf7\x0d\xe9\x43\x5e\xf3\x6b\x39\xc3\x52\x3d\xe2\x2d\x91\x0b\x94\x21\xb4\x5a\xc1\xa6\xff\xc1\x27\x52\x53\x0e\xe7\x82\x31\xc1\x87\xcf\x68\xb5\x42\x68\x87\x25\x3c\x51\x5e\x7e\x25\x7b\xd8\xc0\xbd\x31\xf9\x57\xb2\xb7\xf6\x3e\x58\x1a\x29\x76\xb4\x24\x12\x36\xe0\x1b\xc9\x2f\xc9\xf3\x05\x6b\xf4\xfe\x5b\x67\x48\x43\xa9\x1f\x7d\x75\x68\xb0\x54\x44\x81\x7e\x24\xe0\x47\x40\x4a\x28\xb1\xc6\x80\x79\x09\x4a\x0b\xd9\xd9\x24\x51\xed\x56\x23\xd7\xfc\x10\x9c\x16\x82\x57\xb4\x86\xdb\xbb\x87\xbd\x26\x4b\xd8\x01\xe5\x9a\xc8\x0a\x17\xc4\xd8\x0c\xfc\xf8\xc0\xf8\x59\xb4\xb0\xde\xc0\x08\x73\xfe\x63\x78\x0e\x1e\xee\x77\xae\x7f\xad\xc3\x53\x77\x38\xf9\x27\x5c\x3c\xd5\x52\xb4\xbc\x4c\xb3\x65\xf4\xeb\xd1\xac\x23\xe0\x60\xb3\xfe\xaf\x24\xba\x95\x1c\xda\xfc\xb0\xd1\x25\xec\x32\x64\xfd\x00\xfe\xee\xe0\x07\xdf\x11\x7e\xca\x6b\x10\x15\xec\x02\xd4\xce\x2d\x3d\x40\x96\xf6\x88\x3d\xc4\xac\xc3\xd8\xd5\x75\x04\xca\x63\x60\x5f\xf0\x5c\xb0\x46\x70\xc2\x35\x50\x05\x0f\x58\xd1\x02\x4a\x52\x51\x4e\x35\x15\xdc\x55\x8c\x0e\xc8\x9d\xdc\xd8\xbf\xaf\xdc\x95\xa1\x2a\xda\xd2\x3e\xfb\x35\x7e\x9e\x14\xf0\x27\x07\x12\x3f\x83\xeb\x53\x1d\xc9\x3f\x89\x08\x70\x50\xc0\x9c\x8e\x4d\xd9\xb4\x1c\x98\xc9\xf8\xfe\xfa\x7e\x75\x19\x47\xc8\x00\x87\x39\xfa\xaf\xe3\x61\xb2\xbc\xcb\xcc\x60\x9a\x7b\x94\x26\x9d\x9b\x2a\xad\x80\xc1\x66\x03\x9c\x6e\x61\x60\x4a\x37\xeb\x10\x91\x2e\x78\xbb\xdd\x2e\xb2\xa5\x73\x7a\x49\x04\x16\xbe\xdb\x29\xf3\x7d\x97\x8a\x68\x05\x67\x0c\xb4\x00\x0c\x85\x68\xf6\xae\x5d\xc7\xff\xa1\xe3\xb3\x69\xcb\x93\xf8\xd4\x5f\x95\xd0\xc4\x94\xef\xaf\x76\x1d\xf6\x8a\xbb\x9b\xe9\x62\x9c\x7d\x7d\xd0\x9d\xe0\x3e\xbe\x11\x9e\x02\x8b\x6c\x04\xed\x8c\xc1\x06\x70\xd3\x10\x5e\xa6\xe9\x19\xcb\x6e\xd7\x1f\xef\x96\xa1\xf3\x3c\xcf\xc6\xe8\x3b\xe8\x1e\x4e\x23\x89\x8f\x78\x72\x77\x55\x69\x49\x79\x1d\x82\x22\x86\xf0\x7f\x00\xe1\x8c\xb7\x1f\xef\x1c\x94\x0f\xe6\xc3\x08\x0a\xad\x60\x4b\xb8\x1f\x40\xe6\xac\x7f\x8e\x6c\xee\xe7\xb3\x6e\xfa\x03\xaa\x98\xce\xbf\x37\x92\x72\x5d\xa5\xf7\xe6\xfd\xcf\xf5\xfb\x9f\xf6\x7e\x09\xae\x8f\x2c\x8b\x71\x16\xc8\x56\x91\xe3\x89\x3a\xac\xf3\xf9\x96\x31\x5f\x80\x74\xfb\xc7\xfa\x2e\xce\x62\x18\xdc\x84\x19\xce\x2f\xf0\x62\xba\x7f\x2f\x78\xf9\x72\xfb\x22\x63\x24\xe6\x35\x81\xfc\xc6\xad\x56\x6b\x8f\xed\x6c\xb7\x8f\x29\x2f\xad\xf5\xfb\xf7\x60\x77\x17\x82\x2b\xed\xb7\xb7\x31\xf9\x25\x66\xc4\x5a\x63\xf2\x6b\x52\x75\x2f\xfd\x42\xf7\x09\xee\x3d\x5d\x67\x1c\xa3\x17\x32\xa6\x26\xdc\x35\x04\xde\x16\x9a\x03\xe7\x6b\xfb\x53\x77\x4b\xc6\x5d\x5d\x94\xfc\x03\x9b\xb8\x31\xf3\x6b\x52\x53\xa5\x89\x4c\x51\x92\xcc\xf7\xb4\x44\x49\xe2\xb2\xa4\x12\xce\x8e\x7b\x64\xae\x1b\x57\xd5\xf5\xd5\x4f\x56\x82\x8b\xcc\x22\xf3\xd2\xb9\x58\xaa\x62\x74\x58\x2f\xa7\xdc\xdf\x72\x1b\xcd\x55\x39\xb5\x97\x12\x7f\xb8\x7a\x26\x1e\x25\x8e\x57\xde\xdd\xa9\xde\x44\x0f\x74\xca\xb2\x0c\x25\xb4\xf2\xd6\x77\xfd\x82\x48\x92\xe1\xb6\xfa\x40\x94\x74\x69\xfc\x89\x75\xb7\x36\xc8\xfe\xf2\x15\x06\x05\xea\x67\x28\x19\x11\x7c\xb4\xfd\x5e\xb2\x7c\x96\xaf\xc6\x10\xcf\xaf\x81\xf5\x5f\x7a\x1d\x9a\xa7\xfe\x55\xab\xad\x1d\x09\xd6\x94\xfe\x81\xce\x3d\x53\x3a\xef\xa0\x46\xc3\xf7\xb1\xda\x25\x13\x72\xa0\x64\x90\xb0\xa8\x7a\xa3\xc0\xa3\xaa\x17\xed\x51\xf5\x86\x88\x17\xaa\x17\x4d\xb3\xb4\x3c\x74\x7a\x63\x69\x1c\xe5\x3e\x49\xc1\xa9\xc2\x44\x02\x1d\x53\x44\xc7\xa5\x37\xd3\xc2\x51\x8f\xbf\xa1\x85\x73\x6d\x1e\x48\x60\x4c\x7a\x52\x02\x1d\x96\x13\xe2\x97\x4c\x95\x6f\x86\xf6\xf3\x5c\xed\xa9\xff\x7f\x00\x00\x00\xff\xff\x1c\xa0\x1f\x72\x66\x0c\x00\x00"

func bingGoTplBytes() ([]byte, error) {
	return bindataRead(
		_bingGoTpl,
		"bing.go.tpl",
	)
}

func bingGoTpl() (*asset, error) {
	bytes, err := bingGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bing.go.tpl", size: 3174, mode: os.FileMode(420), modTime: time.Unix(1594937916, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bing.go.tpl": bingGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bing.go.tpl": &bintree{bingGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

