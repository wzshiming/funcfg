// Code generated by go-bindata.
// sources:
// bing.go.tpl
// DO NOT EDIT!

package build

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bingGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xcf\x6f\x9c\x38\x14\x3e\xe3\xbf\xe2\x75\xa4\xaa\x10\x8d\x98\xee\x1e\x47\xe2\xd2\xb4\xaa\xba\xd1\x26\xab\x34\x3d\x45\xd1\xc6\x81\x07\xf1\x66\xb0\xa9\x6d\x92\x66\x91\xff\xf7\xca\x36\x18\x98\x0c\x9d\x1e\xc2\x21\x01\xbf\x1f\xfe\xde\xf3\xe7\xf7\xcd\x66\x03\x1f\x2f\xe0\xfc\xe2\x0a\x3e\x7d\xfc\x72\xf5\x06\x4e\x45\x81\x50\x21\x47\x49\x35\x16\x29\x21\x0d\xcd\x1f\x68\x85\xd0\x75\xe9\x3f\xfe\xd5\x18\x42\x58\xdd\x08\xa9\x21\x26\x00\x00\xab\x5c\x70\x8d\x3f\xf4\xca\x7f\x21\xcf\x45\xc1\x78\xb5\xf9\x4f\x09\x3e\xac\x49\x29\xa4\xea\x3f\xca\x5a\xaf\x88\x7f\xad\x98\xbe\x6f\xef\xd2\x5c\xd4\x9b\xa7\xff\xd5\x3d\xab\x6d\x5c\xd9\xf2\xbc\xac\x36\x0f\x8c\x17\x28\x57\xc7\x1d\xf5\x73\x83\xea\x37\xfc\x5a\x5e\x53\xa9\xee\xe9\xce\x66\x4d\x08\xd9\x6c\x20\x1b\x1e\xf8\x80\x15\xe3\x70\x2a\xea\x5a\xf0\x71\x99\x6c\x36\x84\x3c\x52\x09\x16\xcc\x19\x3e\x43\x06\xb7\x5d\x97\x9e\xe1\xb3\x31\xb7\xde\x52\x60\x79\x65\x01\x40\x06\x0e\x48\x7a\x8e\x4f\x6e\x21\xf6\x5b\x7c\x1b\x76\x85\x86\x4a\x85\x0a\xf4\x3d\x82\xeb\x11\x16\x50\x50\x4d\x81\xf2\x02\x94\x16\xb2\xb7\x49\x54\xed\x4e\x13\x0b\x7a\x0c\x8e\x73\xc1\x4b\x56\xc1\xf5\xcd\xdd\xb3\xc6\x35\x3c\x02\xe3\x1a\x65\x49\x73\xec\x4c\x02\xae\xbf\xd0\xb9\x1e\xb4\xb0\xcd\x60\x52\x6b\xfa\x6d\x7c\xf7\x1e\xf6\x39\xd5\x3f\xb6\x00\xfd\xc9\xa5\x1f\x68\xfe\x50\x49\xd1\xf2\x22\x4e\xd6\xc1\xe7\x33\xea\x2d\x84\x02\xd3\xcf\xa8\x47\xdb\x19\xe3\xc5\x16\xfc\x19\xa5\xf6\xc3\x9b\x8c\xfb\x2b\x51\xb7\x92\x43\x9b\xee\xe3\x5f\xc3\x63\x42\x8c\xeb\xcb\xdf\x7d\x57\xbc\xef\xa4\x2d\x8c\x57\x20\x4a\x78\xf4\x1d\xe8\xdd\xe2\xbd\x82\xe3\xa1\x11\xae\xf2\xa4\x2f\xbd\xdf\xd7\x12\x2f\x0d\x81\xc3\x86\xa7\xa2\x6e\x04\x47\xae\x81\x29\xb8\xa3\x8a\xe5\xb6\x34\xc6\x99\x66\x82\xdb\x1d\x83\x03\xb1\x07\x39\xf5\x1f\x76\xee\xb7\x61\x2a\xd8\xe2\x21\xfb\x25\x7d\x9a\x6d\xe0\x0e\x14\x24\x7d\x02\x8b\x53\x1d\xc8\x3f\x8b\xf0\xe5\x10\x5f\x73\x3c\x35\x25\xf3\xed\xa0\x9b\xb5\xef\xaf\xaf\x17\xe7\xa1\x85\x35\x50\xdf\x47\xb7\x3a\x6d\x66\x9d\xf6\x99\x6b\x98\xe7\x9e\xa4\x89\x97\xba\xca\x4a\xa8\x21\xcb\x80\xb3\x1d\x8c\x04\xea\x7b\xed\x23\xe2\x15\x6f\x77\xbb\x55\xb2\xb6\x4e\x2f\x89\x50\xfb\x75\x33\xbf\x10\x0e\xa5\x42\xad\xe0\xa4\x06\x2d\x80\x42\x2e\x9a\x67\x0b\xd7\x5e\x8b\x11\xf1\xc9\x1c\xf2\x2c\x3e\x76\x37\xc8\x83\x98\x5f\x83\x5f\xa2\xf6\xf3\xc8\x5e\xd5\x78\x35\xcd\xbe\xdd\x43\x27\xb8\x8b\x6f\x84\xa3\xc0\x2a\x99\x94\x76\x52\x43\x06\xb4\x69\x90\x17\x71\x7c\x52\x27\xd7\xdb\xf7\x37\x6b\x8f\x3c\x4d\x93\x69\xf5\x7d\xe9\xae\x9c\x46\xa2\x8b\x78\xb0\x57\x58\x69\xc9\x78\xe5\x83\x42\x0d\xfe\xff\x58\x84\x35\x5e\xbf\xbf\xb1\xa5\xbc\xeb\xde\x4d\x4a\x61\x25\xec\x90\xbb\x06\x24\xd6\xfa\xe7\xc4\x66\x1f\x97\x35\x1b\x0e\xa8\xac\x75\xfa\xb5\x91\x8c\xeb\x32\xbe\xed\xde\x7e\xdf\xbe\xfd\x6e\x6e\xd7\x60\x71\x24\x49\x88\x33\x80\x3b\x85\x87\x13\xf5\xb5\x2e\xe7\x5b\x87\x7c\xbe\xa4\xeb\x3f\xb6\x37\xa1\x17\x63\xe3\x66\xcc\xb0\x7e\x9e\x17\xf3\x71\xfc\x89\x17\x2f\x87\x31\xe9\x3a\x49\x79\x85\x90\xba\x81\x64\xcc\xa1\x11\x6e\xc7\x33\xe3\x85\x31\x6e\x1c\xef\x8d\xf2\x5c\x70\xa5\xdd\xd4\xea\xba\xf4\x9c\xd6\x68\x4c\xd7\xa5\x97\x58\xf6\x1f\xc3\x7c\x77\x09\x6e\x1d\x5d\x17\x1c\x83\x17\xe9\xba\x0a\xb9\x05\x04\xce\xe6\xc1\x81\xf5\x35\xc3\xa9\xdb\x21\x63\xaf\x2e\x89\xfe\x85\x6c\x1c\xa8\x97\x58\x31\xa5\x51\xc6\x24\x8a\x96\x31\xad\x49\x14\xd9\x2c\xb1\x84\x93\xc3\x1e\x89\x45\x63\x53\x5a\x5c\x43\x67\x25\xd8\xc8\x24\x30\x2f\x5e\x8a\x65\x2a\x44\xfb\xf1\x72\xcc\xfd\x35\xa7\xd1\xd2\x2e\xc7\xe6\x52\xe4\x0e\x57\x2f\xc4\x93\xc8\xf2\xca\xb9\x5b\x31\x9c\xe9\x81\x8e\xeb\x24\x21\x11\x2b\x9d\xf5\xcd\x30\x20\xa2\x68\xbc\xad\x2e\x90\x44\x7d\x1a\xc8\xc6\x5b\xeb\x7f\x05\xac\x7f\xc1\x20\x4f\xfd\x84\x44\x13\x82\x4f\xa6\xdf\x4b\x96\x2f\xf2\xb5\xeb\xd0\xf1\x6b\x64\xfd\x97\x41\x87\x96\xa9\x7f\xd1\x6a\x63\x26\x82\x35\xa7\xbf\xa7\xf3\xc0\x94\xde\xdb\xab\xd1\xb8\x3e\x55\xbb\x68\x46\x0e\x12\x8d\x12\x16\x54\x6f\x12\x78\x50\xf5\x82\x3d\xa8\xde\x18\xf1\x42\xf5\x82\x69\x91\x96\xfb\x4e\xaf\x2c\x8d\x93\xdc\x47\x29\x38\x57\x98\x40\xa0\x43\x8a\x68\xb9\xf4\x6a\x5a\x38\xc1\xf8\x1b\x5a\xb8\x04\x73\x4f\x02\x43\xd2\xa3\x12\x68\x6b\x39\x22\x7e\xd1\x5c\xf9\x16\x68\xbf\xcc\xd5\x81\xfa\x3f\x03\x00\x00\xff\xff\xc2\x70\x80\x2b\x9e\x0c\x00\x00"

func bingGoTplBytes() ([]byte, error) {
	return bindataRead(
		_bingGoTpl,
		"bing.go.tpl",
	)
}

func bingGoTpl() (*asset, error) {
	bytes, err := bingGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bing.go.tpl", size: 3230, mode: os.FileMode(420), modTime: time.Unix(1592070202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bing.go.tpl": bingGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bing.go.tpl": &bintree{bingGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

